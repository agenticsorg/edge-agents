#!/usr/bin/env node

/**
 * SPARC2-MCP CLI
 * 
 * This script provides a command-line interface for the SPARC2-MCP server.
 * It allows users to start the MCP server and interact with SPARC2 functionality.
 */

import { spawn } from 'child_process';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';

// Get the directory name of the current module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Command line argument parsing
const args = process.argv.slice(2);
const command = args[0];

// Help text
const helpText = `
SPARC2-MCP CLI

Usage:
  mcp serve                Start the MCP server
  mcp help                 Show this help message

Options:
  --config <path>          Path to config.toml
  --agent-config <path>    Path to agent-config.toml
  --env <path>             Path to .env file
  --trace                  Enable tracing
  --trace-level <level>    Set trace level (debug, info, error)
`;

// Process commands
if (!command || command === 'help') {
  console.log(helpText);
  process.exit(0);
}

if (command === 'serve') {
  console.log('Starting SPARC2-MCP server...');
  
  // Set environment variables from command line arguments
  for (let i = 1; i < args.length; i++) {
    if (args[i] === '--config' && args[i+1]) {
      process.env.SPARC2_CONFIG_PATH = args[i+1];
      i++;
    } else if (args[i] === '--agent-config' && args[i+1]) {
      process.env.SPARC2_AGENT_CONFIG_PATH = args[i+1];
      i++;
    } else if (args[i] === '--env' && args[i+1]) {
      process.env.SPARC2_ENV_PATH = args[i+1];
      i++;
    } else if (args[i] === '--trace') {
      process.env.ENABLE_TRACING = 'true';
    } else if (args[i] === '--trace-level' && args[i+1]) {
      process.env.TRACING_LEVEL = args[i+1];
      i++;
    }
  }
  
  // Start the server
  const serverPath = path.resolve(__dirname, 'dist/index.js');
  
  // Execute the server
  const server = spawn('node', [serverPath], {
    stdio: 'inherit',
    env: process.env
  });
  
  server.on('error', (error) => {
    console.error('Failed to start server:', error);
    process.exit(1);
  });
  
  // Handle exit
  process.on('SIGINT', () => {
    server.kill('SIGINT');
  });
  
  server.on('exit', (code) => {
    process.exit(code || 0);
  });
} else {
  console.error(`Unknown command: ${command}`);
  console.log(helpText);
  process.exit(1);
}